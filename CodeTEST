#Por David Ruiz @viajatech 

#Puedes usar mi script siempre y cuando me des créditos en mis redes sociales @viajatech
#Se agredecido y dale estrella a este repositorio, gracias! 



#pip install tkinter
#pip install SpeechRecognition
#pip install googletrans==4.0.0-rc1
#pip install python-docx
#pip install fpdf
#pip install pyaudio
#pip install pyttsx3








import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import speech_recognition as sr
from googletrans import Translator, LANGUAGES
from docx import Document
from fpdf import FPDF
import pyaudio

class TranscriberApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Transcriptor en Tiempo Real")
        self.is_listening = False
        self.transcribed_text = ""
        self.recognizer = sr.Recognizer()
        self.microphone = None  # Se inicializará después de seleccionar el micrófono
        self.translator = Translator()
        self.selected_language = 'es'
        self.translation_languages = self.get_languages()
        self.create_widgets()

    def create_widgets(self):
        # Caja de texto para mostrar la transcripción
        self.text_display = tk.Text(self.root, height=20, width=80)
        self.text_display.grid(column=0, row=0, columnspan=4, padx=10, pady=10)

        # Seleccionar micrófono
        ttk.Label(self.root, text="Selecciona el micrófono:").grid(column=0, row=1, padx=10, pady=10, sticky='W')
        self.microphone_combo = ttk.Combobox(self.root, state='readonly', width=60)
        self.microphone_combo.grid(column=1, row=1, padx=10, pady=10, columnspan=3)
        self.load_microphones()

        # Botón para iniciar/detener la transcripción
        self.toggle_button = ttk.Button(self.root, text="Iniciar Transcripción", command=self.toggle_listening)
        self.toggle_button.grid(column=0, row=2, padx=10, pady=10)

        # Menú desplegable para seleccionar el idioma de traducción
        ttk.Label(self.root, text="Idioma de Traducción:").grid(column=1, row=2, padx=10, pady=10)
        self.language_combo = ttk.Combobox(
            self.root,
            values=list(self.translation_languages.values()),
            state='readonly'
        )
        self.language_combo.grid(column=2, row=2, padx=10, pady=10)
        self.language_combo.set('Español')  # Idioma por defecto

        # Botón para guardar la transcripción
        self.save_button = ttk.Button(self.root, text="Guardar Transcripción", command=self.save_transcription)
        self.save_button.grid(column=3, row=2, padx=10, pady=10)

    def load_microphones(self):
        # Listar los micrófonos disponibles
        mic_list = sr.Microphone.list_microphone_names()
        mic_names = [f"{index}: {name}" for index, name in enumerate(mic_list)]
        self.microphone_combo['values'] = mic_names
        if mic_names:
            self.microphone_combo.current(0)
        else:
            messagebox.showerror("Error", "No se encontraron micrófonos.")

    def get_languages(self):
        # Obtener los idiomas soportados por googletrans
        languages = {code: name.capitalize() for code, name in LANGUAGES.items()}
        return languages

    def toggle_listening(self):
        if not self.is_listening:
            # Verificar si se ha seleccionado un micrófono
            if not self.microphone_combo.get():
                messagebox.showerror("Error", "Por favor, selecciona un micrófono.")
                return
            # Obtener el índice del micrófono seleccionado
            mic_selection = self.microphone_combo.get()
            mic_index = int(mic_selection.split(":")[0])
            self.microphone = sr.Microphone(device_index=mic_index)
            self.is_listening = True
            self.toggle_button.config(text="Detener Transcripción")
            threading.Thread(target=self.listen_and_transcribe, daemon=True).start()
        else:
            self.is_listening = False
            self.toggle_button.config(text="Iniciar Transcripción")

    def listen_and_transcribe(self):
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source)
            while self.is_listening:
                try:
                    audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=5)
                    # Reconocer el habla
                    text = self.recognizer.recognize_google(audio, language='es-ES')
                    # Traducir si es necesario
                    selected_language = self.get_selected_language_code()
                    if selected_language != 'es':
                        translation = self.translator.translate(text, dest=selected_language)
                        text = translation.text
                    # Actualizar el texto transcrito
                    self.transcribed_text += text + ' '
                    # Actualizar la caja de texto
                    self.text_display.insert(tk.END, text + ' ')
                    self.text_display.see(tk.END)
                except sr.WaitTimeoutError:
                    continue
                except sr.UnknownValueError:
                    pass
                except Exception as e:
                    print(f"Error: {e}")

    def get_selected_language_code(self):
        selected_language_name = self.language_combo.get()
        for code, name in self.translation_languages.items():
            if name == selected_language_name:
                return code
        return 'es'

    def save_transcription(self):
        if not self.transcribed_text.strip():
            messagebox.showerror("Error", "No hay transcripción para guardar.")
            return
        # Diálogo para seleccionar dónde guardar
        filetypes = [("Archivo de Texto", "*.txt"), ("Documento de Word", "*.docx"), ("Archivo PDF", "*.pdf")]
        filename = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=filetypes)
        if filename:
            try:
                if filename.endswith('.txt'):
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(self.transcribed_text)
                elif filename.endswith('.docx'):
                    doc = Document()
                    doc.add_paragraph(self.transcribed_text)
                    doc.save(filename)
                elif filename.endswith('.pdf'):
                    pdf = FPDF()
                    pdf.add_page()
                    pdf.set_font("Arial", size=12)
                    # Manejar texto largo
                    lines = self.transcribed_text.split('\n')
                    for line in lines:
                        pdf.multi_cell(0, 10, txt=line, align='L')
                    pdf.output(filename)
                messagebox.showinfo("Guardado", f"Transcripción guardada en {filename}")
            except Exception as e:
                messagebox.showerror("Error", f"Ocurrió un error al guardar el archivo:\n{str(e)}")

    def on_closing(self):
        self.is_listening = False
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = TranscriberApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
